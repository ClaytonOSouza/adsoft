# Source: nginx/templates/server-block-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx
  labels:
    app.kubernetes.io/name: nginx
    helm.sh/chart: nginx-5.1.11
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/managed-by: Helm
data:
  server-block.conf: |-
    server {
      listen 0.0.0.0:8443 ssl;
      #listen 0.0.0.0:8080;
      #listen 0.0.0.0:8080 ssl;
      server_name nginx.myenvtest.com;

      ssl_certificate      /opt/bitnami/nginx/conf/cert/server.crt;
      ssl_certificate_key  /opt/bitnami/nginx/conf/key/server.key;
      ssl_session_cache    shared:SSL:1m;
      ssl_session_timeout  5m;
      ssl_protocols TLSv1.2;
      ssl_ciphers  HIGH:!aNULL:!MD5;
      ssl_prefer_server_ciphers  on;

      # https://github.com/vouch/vouch-proxy
      # send all requests to the `/validate` endpoint for authorization
      auth_request /validate;

      location /validate {

        # /validate proxies all the requests to vouch
        # vouch can also run behind the same nginx-revproxy
        proxy_pass http://127.0.0.1:9090/validate;

        # be sure to pass the original host header
        proxy_set_header Host $http_host;

        # Vouch Proxy only acts on the request headers
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        # valid user!
        # optionally add X-Vouch-User as returned by Vouch Proxy along with the request
        #auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

        # these return values are used by the @error401 call
        #auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
        #auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
        #auth_request_set $auth_resp_failcount$upstream_http_x_vouch_failcount;
      }

      # if validate returns `401 not authorized` then forward the request to the error401block
      error_page 401 = @error401;

      location @error401 {
          # redirect to vouch proxy for login
          #return 302 https://vouch.myenvtest.com:9090/login?url=$scheme://$http_host$request_uri&lasso-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
          return 302 https://vouch.myenvtest.com:9090/login;
          # you usually *want* to redirect to Vouch running behind the same Nginx config proteced by https
          # but to get started you can just forward the end user to the port that vouch is running on
      }

      location / {
        limit_except GET HEAD POST PUT PATCH OPTIONS {}
        proxy_pass http://www.http2demo.io:80;

        rewrite ^/(.*)$ /$1 break;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-NginX-Proxy true;
        proxy_redirect off;


        # you may need to set these variables in this block as per https://github.com/vouch/vouch-proxy/issues/26#issuecomment-425215810
        #auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user
        #auth_request_set $auth_resp_x_vouch_idp_claims_groups $upstream_http_x_vouch_idp_claims_groups;
        #auth_request_set $auth_resp_x_vouch_idp_claims_given_name $upstream_http_x_vouch_idp_claims_given_name;

        # set user header (usually an email)
        #proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;
        # optionally pass any custom claims you are tracking
        #proxy_set_header X-Vouch-IdP-Claims-Groups $auth_resp_x_vouch_idp_claims_groups;
        #proxy_set_header X-Vouch-IdP-Claims-Given_Name $auth_resp_x_vouch_idp_claims_given_name;
        # optionally pass the accesstoken or idtoken
        #proxy_set_header X-Vouch-IdP-AccessToken $auth_resp_x_vouch_idp_accesstoken;
        #proxy_set_header X-Vouch-IdP-IdToken $auth_resp_x_vouch_idp_idtoken;
      }
    }
---
# Source: nginx/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app.kubernetes.io/name: nginx
    helm.sh/chart: nginx-5.1.11
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  # Create a new static External IP address on GCP Console in section VPC Network -> External IP addresses.
  #loadBalancerIP: XXX.XXX.XXX.XXX
  loadBalancerSourceRanges:
    - 179.159.238.22/32 #my IP address
  externalTrafficPolicy: "Cluster"
  ports:
    - name: http
      port: 80
      targetPort: http
      nodePort: 30081
    - name: https
      port: 443
      targetPort: https
      nodePort: 30444
  selector:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/instance: nginx
---
# Source: nginx/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app.kubernetes.io/name: nginx
    helm.sh/chart: nginx-5.1.11
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
      app.kubernetes.io/instance: nginx
  replicas: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx
        helm.sh/chart: nginx-5.1.11
        app.kubernetes.io/instance: nginx
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: nginx
          image: docker.io/bitnami/nginx:1.16.1-debian-10-r57
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - name: nginx-server-block
              mountPath: /opt/bitnami/nginx/conf/server_blocks
            - name: key
              mountPath: "/opt/bitnami/nginx/conf/key"
              readOnly: true
            - name: cert
              mountPath: "/opt/bitnami/nginx/conf/cert"
              readOnly: true
      volumes:
        - name: nginx-server-block
          configMap:
            name: nginx
        - name: key
          secret:
            secretName: key
        - name: cert
          secret:
            secretName: cert

